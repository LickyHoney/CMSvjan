{"ast":null,"code":"import _slicedToArray from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/likhitha/Documents/cms/client/src/components/dashboard/DisplayEntries.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\n/*import React from \"react\"\n\nconst DisplayEntry = ({ name }) => {\n    return(\n        <div>\n            {name} \n        </div>\n    )\n}\n\nconst DisplayEntries = ({ names, regVal }) => {\n    const regExp = new RegExp(regVal, \"i\")\n    const filteredArray = names.filter((entry) => regExp.test(entry.name))\n    const namesArray = filteredArray.map((entry) => <DisplayEntry key={entry.id} name={entry.name} />)\n    return(\n    <div>\n        {namesArray}\n    </div>\n    )\n}\n\nexport default DisplayEntries*/\nimport React, { useState, useEffect } from \"react\";\nimport service from \"./services.js\";\nimport { Row, Col } from 'reactstrap';\nimport { Card, CardBody, CardTitle } from \"reactstrap\"; //import { index } from \"../../../config/pluginsInit\";\n\nimport { Grid, Table, TableHeaderRow, TableEditColumn, TableInlineCellEditing } from '@devexpress/dx-react-grid-bootstrap4';\nimport { EditingState } from \"@devexpress/dx-react-grid\";\n\nvar getRowId = function getRowId(row) {\n  return row.id;\n};\n\nvar FocusableCell = function FocusableCell(_ref) {\n  var onClick = _ref.onClick,\n      restProps = _objectWithoutProperties(_ref, [\"onClick\"]);\n\n  return /*#__PURE__*/_jsxDEV(Table.Cell, _objectSpread(_objectSpread({}, restProps), {}, {\n    tabIndex: 0,\n    onFocus: onClick\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = FocusableCell;\n\nvar DisplayEntry = function DisplayEntry(_ref2) {\n  _s();\n\n  var lat = _ref2.lat,\n      lng = _ref2.lng,\n      name = _ref2.name,\n      id = _ref2.id;\n\n  var _useState = useState(name),\n      _useState2 = _slicedToArray(_useState, 2),\n      newName = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(lat),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newLat = _useState4[0],\n      setLat = _useState4[1];\n\n  var _useState5 = useState(lng),\n      _useState6 = _slicedToArray(_useState5, 2),\n      newLng = _useState6[0],\n      setLng = _useState6[1]; //  const [ newNumber, setNumber ] = useState(number)\n\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      buttonVal = _useState8[0],\n      setButtonVal = _useState8[1];\n\n  var _useState9 = useState([{\n    title: \"Name\",\n    name: \"name\"\n  }, {\n    title: \"Lat\",\n    name: \"lat\",\n    sortable: true\n  }, {\n    title: \"Lng\",\n    name: \"lng\",\n    sortable: true\n  }]),\n      _useState10 = _slicedToArray(_useState9, 1),\n      columns = _useState10[0];\n\n  var _useState11 = useState([{\n    newName\n  }, {\n    newLat\n  }, {\n    newLng\n  }]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      rows = _useState12[0],\n      setRows = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      editingCells = _useState14[0],\n      setEditingCells = _useState14[1];\n\n  var deleteHandler = function deleteHandler(id) {\n    var handler = function handler() {\n      if (window.confirm(\"Do you reall want to delete \".concat(name, \"'s number?\"))) {\n        service.deletion(id).then(function (response) {\n          setName(\"\");\n          setLat(\"\");\n          setLng(\"\");\n          setButtonVal(\"\");\n        });\n      }\n    };\n\n    return handler;\n  };\n\n  useEffect(function () {\n    setButtonVal( /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deleteHandler(id),\n      children: \"delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 22\n    }, _this));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        sm: \"12\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: \"iq-card\",\n          children: /*#__PURE__*/_jsxDEV(CardBody, {\n            className: \"iq-card-body\",\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              rows: rows,\n              columns: columns,\n              getRowId: getRowId,\n              children: [/*#__PURE__*/_jsxDEV(Table, {\n                cellComponent: FocusableCell\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 29\n              }, _this), /*#__PURE__*/_jsxDEV(TableHeaderRow, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 29\n              }, _this), /*#__PURE__*/_jsxDEV(TableInlineCellEditing, {\n                selectTextOnEditStart: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 29\n              }, _this), /*#__PURE__*/_jsxDEV(TableEditColumn, {\n                children: buttonVal\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 29\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 25\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 21\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 14\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(DisplayEntry, \"P7sTI0ZYOMSLNczBFkXjjLEUMYw=\");\n\n_c2 = DisplayEntry;\n\nvar DisplayEntries = function DisplayEntries(_ref3) {\n  var names = _ref3.names,\n      regVal = _ref3.regVal;\n  var regExp = new RegExp(regVal, \"i\");\n  var filteredArray = names.filter(function (entry) {\n    return regExp.test(entry.name);\n  });\n  var namesArray = filteredArray.map(function (entry) {\n    return /*#__PURE__*/_jsxDEV(DisplayEntry, {\n      name: entry.name,\n      lat: entry.lat,\n      lng: entry.lng,\n      id: entry.id\n    }, entry.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 53\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: namesArray\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, _this);\n};\n\n_c3 = DisplayEntries;\nexport default DisplayEntries;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"FocusableCell\");\n$RefreshReg$(_c2, \"DisplayEntry\");\n$RefreshReg$(_c3, \"DisplayEntries\");","map":{"version":3,"sources":["/Users/likhitha/Documents/cms/client/src/components/dashboard/DisplayEntries.js"],"names":["React","useState","useEffect","service","Row","Col","Card","CardBody","CardTitle","Grid","Table","TableHeaderRow","TableEditColumn","TableInlineCellEditing","EditingState","getRowId","row","id","FocusableCell","onClick","restProps","DisplayEntry","lat","lng","name","newName","setName","newLat","setLat","newLng","setLng","buttonVal","setButtonVal","title","sortable","columns","rows","setRows","editingCells","setEditingCells","deleteHandler","handler","window","confirm","deletion","then","response","DisplayEntries","names","regVal","regExp","RegExp","filteredArray","filter","entry","test","namesArray","map"],"mappings":"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","sourcesContent":["/*import React from \"react\"\n\nconst DisplayEntry = ({ name }) => {\n    return(\n        <div>\n            {name} \n        </div>\n    )\n}\n\nconst DisplayEntries = ({ names, regVal }) => {\n    const regExp = new RegExp(regVal, \"i\")\n    const filteredArray = names.filter((entry) => regExp.test(entry.name))\n    const namesArray = filteredArray.map((entry) => <DisplayEntry key={entry.id} name={entry.name} />)\n    return(\n    <div>\n        {namesArray}\n    </div>\n    )\n}\n\nexport default DisplayEntries*/\n\nimport React, {useState, useEffect} from \"react\"\nimport service from \"./services.js\"\nimport {Row, Col} from 'reactstrap';\nimport { Card, CardBody, CardTitle } from \"reactstrap\";\n//import { index } from \"../../../config/pluginsInit\";\nimport { Grid, Table, TableHeaderRow, TableEditColumn, TableInlineCellEditing } from '@devexpress/dx-react-grid-bootstrap4';\nimport { EditingState } from \"@devexpress/dx-react-grid\";\n\nconst getRowId = row => row.id;\n\nconst FocusableCell = ({ onClick, ...restProps }) => (\n    <Table.Cell {...restProps} tabIndex={0} onFocus={onClick} />\n);\nconst DisplayEntry = ({ lat, lng, name, id }) => {\n    const [ newName, setName ] = useState(name)\n    const [ newLat, setLat] = useState(lat)\n    const [ newLng, setLng] = useState(lng)\n  //  const [ newNumber, setNumber ] = useState(number)\n    const [ buttonVal, setButtonVal ] = useState(\"\")\n    const [columns] = useState([\n        {\n            title: \"Name\",\n            name: \"name\",\n        },\n        {\n            title: \"Lat\",\n            name: \"lat\",\n            sortable: true,\n        },\n        {\n            title: \"Lng\",\n            name: \"lng\",\n            sortable: true,\n        },\n    ]);\n    const [rows, setRows] = useState([\n        {newName},\n        {newLat},\n        {newLng}\n        \n    ]);\n    const [editingCells, setEditingCells] = useState([]);\n\n    const deleteHandler = (id) =>{\n        const handler = () =>{\n            if(window.confirm(`Do you reall want to delete ${name}\\'s number?`)){\n                service.deletion(id)\n                .then(response => {\n                    \n                    setName(\"\")\n                    setLat(\"\")\n                    setLng(\"\")\n                    \n                    setButtonVal(\"\")\n                })\n            }\n        }\n        return handler\n    }\n\n    useEffect(()=>{\n        setButtonVal(<button onClick={deleteHandler(id)}>delete</button>)\n    },\n    [])\n\n    return(\n        <div>\n            {/* <Table striped bordered hover>\n            <thead>\n        <tc>\n      <th>Name</th>\n      <th>Lat</th>\n      <th>Lng</th>\n     </tc>\n  </thead>\n  <tbody>\n    <tr>\n      <td>{newName} </td>\n      <td>{newLat}  </td>\n      <td> {newLng} </td>\n      <td> {buttonVal} </td>\n    </tr>\n    </tbody>\n            \n            \n            \n            \n            </Table> */}\n             <Row>\n            <Col sm=\"12\">\n                <Card className=\"iq-card\">\n                    {/* <div className=\"iq-card-header d-flex justify-content-between\">\n                        <CardTitle className=\"iq-header-title\">\n                            <h4 className=\"card-title\">Editable Table</h4>\n                        </CardTitle>\n                    </div> */}\n                    <CardBody className=\"iq-card-body\">\n                        <Grid\n                            rows={rows}\n                            columns={columns}\n                            getRowId={getRowId}\n                        >\n                            {/* <EditingState\n                                onCommitChanges={commitChanges}\n                                editingCells={editingCells}\n                                onEditingCellsChange={setEditingCells}\n                                addedRows={[]}\n                                onAddedRowsChange={addEmptyRow}\n                            /> */}\n                            <Table cellComponent={FocusableCell} />\n                            <TableHeaderRow />\n                            <TableInlineCellEditing selectTextOnEditStart />\n                            <TableEditColumn>\n                                {buttonVal}\n                                </TableEditColumn>\n                        </Grid>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n        </div>\n    )\n}\n\nconst DisplayEntries = ({ names, regVal }) => {\n    const regExp = new RegExp(regVal, \"i\")\n    const filteredArray = names.filter((entry) => regExp.test(entry.name))\n    const namesArray = filteredArray.map((entry) => <DisplayEntry key={entry.id} name={entry.name} lat={entry.lat} lng={entry.lng} id={entry.id} />)\n    \n    return(\n    <div>\n        {namesArray}\n    </div>\n    )\n}\n\nexport default DisplayEntries"]},"metadata":{},"sourceType":"module"}