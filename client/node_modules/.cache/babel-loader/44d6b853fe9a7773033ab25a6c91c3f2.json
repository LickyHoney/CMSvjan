{"ast":null,"code":"import _classCallCheck from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/likhitha/Documents/cms/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/likhitha/Documents/cms/client/src/components/dashboard/MazeMapWrapper.jsx\";\nimport * as React from 'react';\nimport { Mazemap } from \"mazemap\";\nimport \"../../../node_modules/mazemap/mazemap.min.css\";\nimport styles from \"./mazemap-wrapper.css\";\nwindow.Mazemap = Mazemap;\nexport function makeMazeMapInstance(options) {\n  var mazemapRoot = document.createElement('div');\n  mazemapRoot.className = styles.mapRoot;\n  var defaultOptions = {\n    container: mazemapRoot,\n    campuses: 'default',\n    center: {\n      lng: 30,\n      lat: 30\n    },\n    zoom: 1,\n    zLevel: 1\n  };\n  var mapOptions = Object.assign({}, defaultOptions, options);\n  var map = new Mazemap.Map(mapOptions);\n  /* For debugging, it helps to add the map to global window\n     to quickly access methods like window.mazemapinstance.getZoom(), etc.\n     To do so, add the line below\n      window.mazemapinstance = map;\n  */\n\n  return map;\n}\nexport var MazeMapWrapper = /*#__PURE__*/function (_React$Component) {\n  _inherits(MazeMapWrapper, _React$Component);\n\n  var _super = _createSuper(MazeMapWrapper);\n\n  function MazeMapWrapper() {\n    var _this;\n\n    _classCallCheck(this, MazeMapWrapper);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._onResize = function () {\n      _this._updateZLevelControlHeight();\n    };\n\n    return _this;\n  }\n\n  _createClass(MazeMapWrapper, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.map.on('resize', this._onResize);\n\n      this._onResize();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.map.off('resize', this._onResize);\n    }\n  }, {\n    key: \"_updateZLevelControlHeight\",\n    value: function _updateZLevelControlHeight() {\n      // Update the zLevelControl maxHeight, if it exists\n      var map = this.props.map;\n\n      if (map.zLevelControl) {\n        var height = map.getCanvas().clientHeight;\n        var maxHeight = height - 50; // 50 pixels account for margins and spacing\n\n        map.zLevelControl.setMaxHeight(maxHeight);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (!this.props.map) {\n        return null;\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: function ref(_ref) {\n          _ref && _ref.appendChild(_this2.props.map.getContainer());\n\n          _this2.props.map.resize();\n        },\n        className: [styles.mazemapWrapper, this.props.className].join(' '),\n        children: [\" \", this.props.children]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return MazeMapWrapper;\n}(React.Component);","map":{"version":3,"sources":["/Users/likhitha/Documents/cms/client/src/components/dashboard/MazeMapWrapper.jsx"],"names":["React","Mazemap","styles","window","makeMazeMapInstance","options","mazemapRoot","document","createElement","className","mapRoot","defaultOptions","container","campuses","center","lng","lat","zoom","zLevel","mapOptions","Object","assign","map","Map","MazeMapWrapper","_onResize","_updateZLevelControlHeight","props","on","off","zLevelControl","height","getCanvas","clientHeight","maxHeight","setMaxHeight","ref","appendChild","getContainer","resize","mazemapWrapper","join","children","Component"],"mappings":";;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAO,+CAAP;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACAC,MAAM,CAACF,OAAP,GAAiBA,OAAjB;AAQA,OAAO,SAASG,mBAAT,CAA6BC,OAA7B,EAA2D;AAC9D,MAAMC,WAAW,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAApB;AACAF,EAAAA,WAAW,CAACG,SAAZ,GAAwBP,MAAM,CAACQ,OAA/B;AACA,MAAMC,cAAc,GAAG;AACnBC,IAAAA,SAAS,EAAEN,WADQ;AAEnBO,IAAAA,QAAQ,EAAE,SAFS;AAGnBC,IAAAA,MAAM,EAAE;AAACC,MAAAA,GAAG,EAAE,EAAN;AAAUC,MAAAA,GAAG,EAAE;AAAf,KAHW;AAInBC,IAAAA,IAAI,EAAE,CAJa;AAKnBC,IAAAA,MAAM,EAAE;AALW,GAAvB;AAQA,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,cAAlB,EAAkCN,OAAlC,CAAnB;AAEA,MAAMiB,GAAG,GAAG,IAAIrB,OAAO,CAACsB,GAAZ,CAAgBJ,UAAhB,CAAZ;AACA;AACJ;AACA;AACA;AACA;;AAEI,SAAOG,GAAP;AACH;AAED,WAAaE,cAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,UAaIC,SAbJ,GAagB,YAAM;AACd,YAAKC,0BAAL;AACH,KAfL;;AAAA;AAAA;;AAAA;AAAA;AAAA,wCAIuB;AACf,WAAKC,KAAL,CAAWL,GAAX,CAAeM,EAAf,CAAkB,QAAlB,EAA4B,KAAKH,SAAjC;;AACA,WAAKA,SAAL;AACH;AAPL;AAAA;AAAA,2CAS0B;AAClB,WAAKE,KAAL,CAAWL,GAAX,CAAeO,GAAf,CAAmB,QAAnB,EAA6B,KAAKJ,SAAlC;AACH;AAXL;AAAA;AAAA,iDAiBgC;AACxB;AACA,UAAMH,GAAG,GAAG,KAAKK,KAAL,CAAWL,GAAvB;;AAEA,UAAGA,GAAG,CAACQ,aAAP,EAAqB;AACjB,YAAIC,MAAM,GAAGT,GAAG,CAACU,SAAJ,GAAgBC,YAA7B;AACA,YAAIC,SAAS,GAAGH,MAAM,GAAG,EAAzB,CAFiB,CAEY;;AAC7BT,QAAAA,GAAG,CAACQ,aAAJ,CAAkBK,YAAlB,CAA+BD,SAA/B;AACH;AACJ;AA1BL;AAAA;AAAA,6BA4Ba;AAAA;;AACL,UAAI,CAAC,KAAKP,KAAL,CAAWL,GAAhB,EAAqB;AACjB,eAAO,IAAP;AACH;;AAED,0BACI;AAAK,QAAA,GAAG,EAAG,aAACc,IAAD,EAAS;AACZA,UAAAA,IAAG,IAAIA,IAAG,CAACC,WAAJ,CAAgB,MAAI,CAACV,KAAL,CAAWL,GAAX,CAAegB,YAAf,EAAhB,CAAP;;AACA,UAAA,MAAI,CAACX,KAAL,CAAWL,GAAX,CAAeiB,MAAf;AACH,SAHL;AAIE,QAAA,SAAS,EAAE,CAACrC,MAAM,CAACsC,cAAR,EAAwB,KAAKb,KAAL,CAAWlB,SAAnC,EAA8CgC,IAA9C,CAAmD,GAAnD,CAJb;AAAA,wBAIwE,KAAKd,KAAL,CAAWe,QAJnF;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH;AAxCL;;AAAA;AAAA,EAAoC1C,KAAK,CAAC2C,SAA1C","sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport * as React from 'react';\n\nimport { Mazemap } from \"mazemap\"\nimport \"../../../node_modules/mazemap/mazemap.min.css\"\nimport styles from \"./mazemap-wrapper.css\"\nwindow.Mazemap = Mazemap;\n\ntype Props = {\n    map: Mazemap.Map,\n    children?: Node,\n    className?: string,\n};\n\nexport function makeMazeMapInstance(options: Object): Mazemap.Map {\n    const mazemapRoot = document.createElement('div');\n    mazemapRoot.className = styles.mapRoot;\n    const defaultOptions = {\n        container: mazemapRoot,\n        campuses: 'default',\n        center: {lng: 30, lat: 30},\n        zoom: 1,\n        zLevel: 1,\n    };\n\n    const mapOptions = Object.assign({}, defaultOptions, options);\n\n    const map = new Mazemap.Map(mapOptions);\n    /* For debugging, it helps to add the map to global window\n       to quickly access methods like window.mazemapinstance.getZoom(), etc.\n       To do so, add the line below\n\n       window.mazemapinstance = map;\n    */\n    return map;\n}\n\nexport class MazeMapWrapper extends React.Component<Props> {\n\n    _onResizeBound: any;\n\n    componentDidMount(){\n        this.props.map.on('resize', this._onResize);\n        this._onResize();\n    }\n\n    componentWillUnmount(){\n        this.props.map.off('resize', this._onResize);\n    }\n\n    _onResize = () => {\n        this._updateZLevelControlHeight();\n    }\n\n    _updateZLevelControlHeight(){\n        // Update the zLevelControl maxHeight, if it exists\n        const map = this.props.map;\n\n        if(map.zLevelControl){\n            var height = map.getCanvas().clientHeight;\n            var maxHeight = height - 50; // 50 pixels account for margins and spacing\n            map.zLevelControl.setMaxHeight(maxHeight);\n        }\n    }\n\n    render() {\n        if( !this.props.map ){\n            return null;\n        }\n\n        return (\n            <div ref={ (ref) => {\n                    ref && ref.appendChild(this.props.map.getContainer() );\n                    this.props.map.resize();\n                }\n            } className={[styles.mazemapWrapper, this.props.className].join(' ')}> {this.props.children}</div>\n        );\n    }\n\n}"]},"metadata":{},"sourceType":"module"}